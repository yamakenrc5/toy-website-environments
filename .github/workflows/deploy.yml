name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_TEST_CRED:
        required: true
      AZURE_PROD_CRED:
        required: true

jobs:
  validate:
     runs-on: ubuntu-latest
     steps:
     - uses: actions/checkout@v3
     - name: Sign in to Azure
       uses: azure/login@v1
       with:
         creds: ${{ secrets.AZURE_TEST_CRED if inputs.environmentType != 'Production' else secrets.AZURE_PROD_CRED }}
        
     - uses: azure/arm-deploy@v1
       name: Run preflight validation
       with:
          creds: ${{ secrets.AZURE_TEST_CRED if inputs.environmentType != 'Production' else secrets.AZURE_PROD_CRED }}
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ./deploy/main.bicep
          parameters: >
           environmentType=${{ inputs.environmentType }}
          deploymentMode: Validate

  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      appServiceAppHostName: ${{ steps.deploy.outputs.appServiceAppHostName }}
    steps:
    - uses: actions/checkout@v3
    - name: Sign in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_TEST_CRED if inputs.environmentType != 'Production' else secrets.AZURE_PROD_CRED }}
    - uses: azure/arm-deploy@v1
      id: deploy
      name: Deploy Bicep file
      with:
        failOnStdErr: false
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ inputs.resourceGroupName }}
        template: ./deploy/main.bicep
        parameters: >
          environmentType=${{ inputs.environmentType }}

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v3
    - run: |
        $container = New-PesterContainer `
          -Path 'deploy/Website.Tests.ps1' `
          -Data @{ HostName = '${{needs.deploy.outputs.appServiceAppHostName}}' }
        Invoke-Pester `
          -Container $container `
          -CI
      name: Run smoke tests
      shell: pwsh
