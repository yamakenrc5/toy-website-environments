name: deploy-toy-website-environments  
concurrency: toy-company  
  
on:  
  push:  
    branches:  
      - main  
  workflow_dispatch:  
    inputs:  
      environmentType:  
        required: true  
        type: string  
        default: Test  
      resourceGroupName:  
        required: true  
        type: string  
        default: ToyWebSiteTest  
      creds:  
        required: true  
      reviewApiUrl:  
        required: true  
        type: string  
    secrets:  
      cred:  
        required: true  
      reviewApiKey:  
        required: true  
      reviewApiUrl:  
        required: true  

permissions:
  id-token: write
  contents: read

env:
  TEMPLATE: ./deploy/main.bicep
  TESTSCRIPT: ./deploy/Website.Tests.ps1
  RESOURCEGROUP: ToyWebsiteTest
  PROD_RESOURCEGROUP: ToyWebsiteProduction
  TEST_CRED: ${{ secrets.AZURE_TEST_CRED }}
  PROD_CRED: ${{ secrets.AZURE_PROD_CRED }}
  TESTTYPE: Test
  PRODTYPE: Production

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint code
        run: |
          az bicep build --file ${{ env.TEMPLATE }}

  validate:
    runs-on: ubuntu-latest
    needs: lint
    env:
      deploymentName: ${{ github.run_number }}
      resourceGroupName: ${{ env.RESOURCEGROUP }}
      template: ${{ env.TEMPLATE }}
      environmentType: ${{ env.TESTTYPE }}
      reviewApiUrl: ${{ inputs.reviewApiUrl }}
      reviewApiKey: ${{ secrets.REVIEW_API_KEY_TEST }}
      deploymentMode: Validate
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ env.TEST_CRED }}
      - uses: azure/arm-deploy@v1
        name: Run preflight validation

  whatif-production:  
    runs-on: ubuntu-latest  
    needs: validate  
    env:
      deploymentName: ${{ github.run_number }}
      resourceGroupName: ${{ env.PROD_RESOURCEGROUP }}
      template: ${{ env.TEMPLATE }}
      environmentType: ${{ env.PRODTYPE }}
      reviewApiUrl: ${{ inputs.reviewApiUrl }}
      reviewApiKey: ${{ secrets.REVIEW_API_PRODUCTION }}
      deploymentMode: Validate
    steps:  
      - uses: azure/login@v1  
        name: Login to Azure
        with:  
          creds: ${{ env.PROD_CRED }}  
      - uses: azure/arm-deploy@v1  
        name: Run what-if  
        with:  
            failOnStdErr: false  
            additionalArguments: --what-if  

  deploy-test:
    needs: whatif-production
    runs-on: ubuntu-latest
    env:
      environmentType: ${{ env.TESTTYPE }}
      resourceGroupName: ${{ env.RESOURCEGROUP }}
      reviewApiUrl: https://sandbox.contoso.com/reviews
      creds: ${{ env.TEST_CRED }}
      reviewApiKey: ${{ secrets.REVIEW_API_KEY_PRODUCTION }}
      deploymentMode: Validate
    steps:
      - name: Login to Azure
        uses: azure/login@v1
      - uses: actions/checkout@v3
      - name: Deploy to test environment
        uses: azure/arm-deploy@v1

  deploy-production:
    needs: deploy-test
    runs-on: ubuntu-latest
    env:
      environmentType: ${{ env.PRODTYPE }}
      resourceGroupName: ${{ env.PROD_RESOURCEGROUP }}
      template: ${{ env.TEMPLATE }}
      reviewApiUrl: https://api.contoso.com/reviews
      creds: ${{ env.PROD_CRED }}
      reviewApiKey: ${{ secrets.REVIEW_API_KEY_PRODUCTION }}
      deploymentMode: Validate
    steps:
      - name: Login to Azure
        uses: azure/login@v1
      - uses: actions/checkout@v3
      - name: Deploy to production environment
        uses: azure/arm-deploy@v1

  smoke-test:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - uses: actions/checkout@v3
      - run: |
          $container = New-PesterContainer `
            -Path ${{ env.TESTSCRIPT }} `
            -Data @{ HostName = '${{needs.deploy-production.outputs.appServiceAppHostName}}' }
          Invoke-Pester `
            -Container $container `
            -CI `  
            -FailOnStderr $false 
        name: Run smoke tests
        shell: pwsh

  rollback:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: ${{ always() && needs.smoke-test.result == 'failure' }}
    steps:
      - run: |
          echo "Performing rollback steps..."        ## just echo-ing.
