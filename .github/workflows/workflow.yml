name: deploy-toy-website-environments  
concurrency: toy-company  
  
on:  
  push:  
    branches:  
      - main  
  workflow_dispatch:  
    inputs:  
      environmentType:  
        required: true  
        type: string  
        default: Test  
      resourceGroupName:  
        required: true  
        type: string  
        default: ToyWebSiteTest  
      creds:  
        required: true  
      reviewApiUrl:  
        required: true  
        type: string  
    secrets:  
      cred:  
        required: true  
      reviewApiKey:  
        required: true  
      reviewApiUrl:  
        required: true  

permissions:
  id-token: write
  contents: read

env:
  TEMPLATE: ./deploy/main.bicep
  TESTSCRIPT: ./deploy/Website.Tests.ps1
  RESOURCEGROUP: ToyWebsiteTest
  PROD_RESOURCEGROUP: ToyWebsiteProduction
  TEST_CRED: ${{ secrets.AZURE_TEST_CRED }}
  PROD_CRED: ${{ secrets.AZURE_PROD_CRED }}
  TESTTYPE: Test
  PRODTYPE: Production
  DEPLOYMODE: Validate
  REVURL: https://api.contoso.com/reviews

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint code
        run: |
          az bicep build --file ${{ env.TEMPLATE }}

  validate:
    runs-on: ubuntu-latest
    needs: lint
    env:
      failOnStdErr: false  ##main.bicep emits errors
      deploymentMode: Validate
      deploymentName: ${{ github.run_number }}
      reviewApiUrl: ${{ inputs.reviewApiUrl }}
      reviewApiKey: ${{ secrets.REVIEW_API_KEY_TEST }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ secrets.AZURE_TEST_CRED }}
      - uses: azure/arm-deploy@v1
        name: Run preflight validation
        with:
          resourceGroupName: ${{ env.RESOURCEGROUP }}
          template: ${{ env.TEMPLATE }}
          parameters: >
            environmentType=${{env.TESTTYPE}}
            reviewApiUrl=${{env.REVURL }}
            reviewApiKey=${{ secrets.REVIEW_API_KEY_TEST }}
      
  whatif-production:  
    runs-on: ubuntu-latest  
    needs: validate  
    env:
      failOnStdErr: false  
      additionalArguments: --what-if  
      deploymentMode: Validate
      deploymentName: ${{ github.run_number }}
    steps:  
      - uses: azure/login@v1  
        name: Login to Azure
        with:  
          creds: ${{ secrets.AZURE_PROD_CRED }}  
      - uses: azure/arm-deploy@v1  
        name: Run what-if  
        with:  
            resourceGroupName: ${{ env.PROD_RESOURCEGROUP }}
            template: ${{ env.TEMPLATE }} 
            parameters: >             
              environmentType=${{ env.PRODTYPE }}
              reviewApiUrl=${{ env.REVURL }}
              reviewApiKey=${{ secrets.REVIEW_API_PRODUCTION }}
  deploy-test:
    needs: whatif-production
    runs-on: ubuntu-latest
    env:
      creds: ${{ secrets.AZURE_TEST_CRED }}
      deploymentMode: Validate

    steps:
      - name: Login to Azure
        uses: azure/login@v1
      - uses: actions/checkout@v3
      - name: Deploy to test environment
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RESOURCEGROUP }}
          parameters: >
            environmentType=${{env.TESTTYPE}}
            reviewApiUrl=${{env.REVURL}}
            reviewApiKey=${{ secrets.REVIEW_API_KEY_PRODUCTION }}

  deploy-production:
    needs: deploy-test
    runs-on: ubuntu-latest
    env:
      deploymentMode: Validate
      creds: ${{ secrets.AZURE_PROD_CRED }}
    steps:
      - name: Login to Azure
        uses: azure/login@v1
      - uses: actions/checkout@v3
      - name: Deploy to production environment
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.PROD_RESOURCEGROUP }}
          template: ${{ env.TEMPLATE }}
          parameters: >
            reviewApiUrl=${{env.REVURL}}
            reviewApiKey=${{ secrets.REVIEW_API_KEY_PRODUCTION }}
      - name: Rollback action
        run: |
          echo "Performing rollback steps..."        ## just echo-ing.
        if: ${{ always() && needs.deploy-production.result == 'failure' }}
